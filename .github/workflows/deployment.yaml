---
name: Deployment
on:
  push:
    branches:
      - master
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.2

      - name: Set up Node.js
        uses: actions/setup-node@v3.6.0
        with:
          node-version: 15.x
          registry-url: https://registry.npmjs.org

      - name: Use npm cache
        uses: actions/cache@v3.3.1
        with:
          path: ~/.npm
          key: npm

      - name: Use pip cache
        uses: actions/cache@v3.3.1
        with:
          path: ~/.cache/pip
          key: pip

      - name: Install linters
        run: |
          pip install restructuredtext-lint
          make install-pre-commit
          make install-linters-binaries

      - name: Run linters
        run: make lint
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.5.0

      - name: Login to GitHub registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and push docker image
        uses: docker/build-push-action@v4.0.0
        with:
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    env:
      PROJECT: blog
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.2

      - name: Install kubectl
        uses: azure/setup-kubectl@v3.2

      - name: Configure kubectl
        run: |
          mkdir ~/.kube
          echo "$KUBECONFIG" > ~/.kube/config
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }} # Done as a variable because it doesn't work in place.

      - name: Install doctl
        uses: digitalocean/action-doctl@v2.2.0
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Deploy
        run: |
          kubectl apply -f deployment/deployment.yaml
          kubectl apply -f deployment/ingress.yaml
          kubectl apply -f deployment/service.yaml
          kubectl rollout restart "deployment/$PROJECT"
          kubectl rollout status "deployment/$PROJECT"
